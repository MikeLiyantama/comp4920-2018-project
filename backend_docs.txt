Backend API Documentation

-------------------------------- USER --------------------------------

POST /api/auth
    Authenticate a user.
    Required Payload: { email: "some@email.com", password: "some_password" }
    Return Value:
        200 - Log in successful
                with { success: true, token: some_token }
        200 - Log in failed
                with { success: false }
        400 - Invalid user input
                with { message: "Must provide email and password" }

PUT /api/register
    Create a new user.
    Required Payload: { email: "some@email.com", password: "some_password" }
    Return Value:
        200 - New user created successfully
                with { success: true, message: "registration successful" }
        200 - Email already used
                with { success: false, message: "email has been used in another account" }
        200 - Database error
                with { success: false, message: "database error" }
        400 - Invalid user input
                with { success: false, message: "Must provide email and password" }

GET /api/users
    Get all users.
    Return Value:
        200 - Success
                an array of all users
        500 - Database error
                with { message: "Failed to retrieve users" }

GET /api/me
    Get the current user.
    Return Value:
        200 - Success
                with { currUser: ObjectId }

-------------------------------- TASKS --------------------------------

Note: Use /api/task_with_auth and /api/task_with_auth/:id instead
      for endpoints with authentication

POST /api/task
    Create a new task.
    Required Payload: A JSON, which must include a "title" field.
    Return Value:
        201 - New task created
                with a JSON representing the task record
        400 - Invalid user input
                with { message: "Must provide a title" }
        500 - Database error
                with { message: "Failed to create new task" }

GET /api/task
    Retrieve all tasks.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                with a JSON representing all task records
        500 - Database error
                with { message: "Failed to retieve tasks" }

GET /api/task/:id
    Retrieve one task.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                with a JSON representing the task record
        400 - Invalid user input
                with { message: "Invalid task ID" }
        404 - No task found
                with { message: "No task found" }
        500 - Database error
                with { message: "Failed to retieve task" }

PUT /api/task/:id
    Update a task.
    Required Payload: The new record for that task id.
    Return Value:
        204 - Success (No Content)
                The server has successfully fulfilled the request and that 
                there is no additional content to send in the response payload body.
        400 - Invalid user input
                with { message: "Invalid task ID" }
        404 - No task found
                with { message: "No task found" }
        500 - Database error
                with { message: "Failed to update task" }


-------------------------------- LISTS --------------------------------

Note: Each user has a default list.

POST /api/list
    Create a new list.
    Required Payload: A JSON, which must include a "title" field.
    Return Value:
        201 - New list created
                with a JSON representing the list record
        400 - Invalid user input
                with { message: "Must provide a title" }
        500 - Database error
                with { message: "Failed to create new list" }

GET /api/list
    Retrieve all lists the current user has created.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                an array of all lists
        500 - Database error
                with { message: "Failed to retieve lists" }

GET /api/list/:id
    Retrieve one list with specific ID.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                with a JSON representing the list record
        404 - No list found
                with { message: "No list found" }
        500 - Database error
                with { message: "Failed to retieve list" }

DELETE /api/list/:id
    Delete a list.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                with { message: "success" }
        404 - No list found
                with { message: "No list found" }
        500 - Database error
                with { message: "Failed to delete list" }

PUT /api/list/:id
    Update a list.
    Usually, only the title and the description should be updated.
    But there is no restriction on what can be updated.
    Required Payload: A JSON containing "title" and/or "description" field.
    Return Value:
        204 - Success (No Content)
                The server has successfully fulfilled the request and that 
                there is no additional content to send in the response payload body.
        404 - No list found
                with { message: "No list found" }
        500 - Database error
                with { message: "Failed to update list" }

PUT /api/list/:id/task
    Add a task to a list.
    Required Payload: { "_id": ObjectId of the task }
    Return Value:
        200 - Success
                with { message: "success" }
        404 - No list found
                with { message: "No list found" }
        500 - Database error
                with { message: "Failed to update list" }

DELETE /api/list/:id/task
    Delete a task from a list.
    Required Payload: { "_id": ObjectId of the task }
    Return Value:
        200 - Success
                with { message: "success" }
        // a deletion succeeds no matter if the task exists
        404 - No list found
                with { message: "No list found" }
        500 - Database error
                with { message: "Failed to update list" }


-------------------------------- TEAMS --------------------------------

POST /api/team
    Create a new team.
    Required Payload: A JSON
                    - "members" array is allowed in the JSON. Each element of
                      the array should follow the TeamMember model.
                    - "creator" is also allowed and should follow the
                      TeamMember model.
                    - Multiple leaders can present in a team.

    Return Value:
        201 - New team created
                with a JSON representing the team record
        500 - Database error
                with { message: "Failed to create new team" }

GET /api/team
    Retrieve all teams of which a user is a member or a creator.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                with a JSON representing all relevant team records
              - Note that this is an expanded version of the team record.
                This means the creator and the members fields of the JSON
                are not the same as what get stored in the database (id only),
                instead, they follow the TeamMember model.
        500 - Database error
                with { message: "Failed to retieve teams" }

GET /api/team/:id
    Retrieve one team with specific ID.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                with a JSON representing the team record
              - Note that this is an expanded version of the team record.
                This means the creator and the members fields of the JSON
                are not the same as what get stored in the database (id only),
                instead, they follow the TeamMember model.
        400 - Invalid user input
                with { message: "Invalid team ID" }
        404 - No team found
                with { message: "No team found" }
        500 - Database error
                with { message: "Failed to retieve team" }

DELETE /api/team/:id
    Delete a team.
    Required Payload: Nothing.
    Return Value:
        200 - Success
                with a JSON delete transaction record.
        400 - Invalid user input
                with { message: "Invalid team ID" }
        404 - No team found
                with { message: "No team found" }
        500 - Database error
                with { message: "Failed to delete team" }

PUT /api/team/:id
    Update a team. 
    Only description, banner and name can be updated.
    Required Payload: A JSON containing "name" and/or "description" field.
    Return Value:
        204 - Success (No Content)
                The server has successfully fulfilled the request and that 
                there is no additional content to send in the response payload body.
        400 - Invalid user input
                with { message: "Invalid team ID" }
        404 - No team found
                with { message: "No team found" }
        500 - Database error
                with { message: "Failed to update team" }

PUT /api/team/:id/member
    Add the current user, or a specific user to a team.
    Required Payload: Optional { "_id": ObjectId of the member }
                      If no "_id" is specified the current user will be added.
    Return Value:
        200 - Success
                with { message: "success" }
        404 - Incorrect team ID format
                with { message: "Incorrect team ID format" }
        500 - Database error
                with { message: "Failed to add member" }

DELETE /api/team/:id/member
    Remove the current user, or a specific member from a team.
    Required Payload: Optional { "_id": ObjectId of the member }
                      If no "_id" is specified the current user will be deleted.
    Return Value:
        200 - Success
                with { message: "success" }
        404 - Incorrect team ID format
                with { message: "Incorrect team ID format" }
        500 - Database error
                with { message: "Failed to delete member" }

PUT /api/team/:id/list
    Add a list to a team.
    Required Payload: { "_id": ObjectId of the list }
    Return Value:
        200 - Success
                with { message: "success" }
        404 - Incorrect team ID format
                with { message: "Incorrect team ID format" }
        500 - Database error
                with { message: "Failed to add list" }

DELETE /api/team/:id/list
    Remove a list from a team.
    Required Payload: { "_id": ObjectId of the list }
    Return Value:
        200 - Success
                with { message: "success" }
        404 - Incorrect team ID format
                with { message: "Incorrect team ID format" }
        500 - Database error
                with { message: "Failed to delete list" }

-------------------------------- SCHEMA --------------------------------

collection USERS {
        _id: ObjectId,
        email: string,
        password: string
}

collection TASKS {
        _id: ObjectId,
        title: string,
        description: string,
        importance: string,
        dueDate: string,
        createdAt: date,
        createdBy: ObjectId,
        deleted: boolean
}

collection TEAMS {
        _id: ObjectId,
        name: string,
        description: string,
        createdAt: date,
        createdBy: ObjectId,
        members: array(ObjectId),
        leaders: array(ObjectId)
}

collection LISTS {
        _id: ObjectId,
        title: string,
        description: string,
        createdAt: date,
        createdBy: ObjectId,
        tasks: array(ObjectId)
}

class TeamMember {
        user: User,
        isCreator: boolean,
        isLeader: boolean
}